###################
# Global Settings #
###################

stages:
  - Env
  - Build_n_Test
  - Trigger

variables:
  #CI_DEBUG_TRACE: "true"
  GIT_SUBMODULE_STRATEGY: recursive
  CCACHE_DIR: "${CI_PROJECT_DIR}/ccache"
  CCACHE_UMASK: 000
  DISTRO: "centOS"
  RUNTIME: "legion"
  BUILD_TYPE: "Debug"
  CC: "gcc"
  CXX: "g++"
  CXXFLAGS: ""
  GASNET_BACKTRACE: 1
  FLECSISP_SPACK_ROOT: /home/gitlab-runner/ngc/laristra/spack
  FLECSISP_DEPS_LOCK: /home/gitlab-runner/ngc/laristra/deps.pid
  #lock_fd: 314
  FLECSISP_CI_JOB_NAME_NOSTAGE: ${CI_JOB_NAME#*:}
  FLECSISP_MPI_PACKAGE: ""
  FLECSISP_MPICH_VERSION: "3.2.1"
  FLECSISP_OPENMPI_VERSION: "3.1.4"
  FLECSISP_INTEL_VERSION: "19.0.2"
  FLECSISP_CLANG_VERSION: "8.0.1"
  FLECSISP_GCC_VERSION: "8.3.0"
  FLECSISP_PYTHON_VERSION: "3.5.1"
  FLECSISP_TANGRAM_INSTALL_PREFIX: "${CI_PROJECT_DIR}/tangram/build/install"
  FLECSISP_TANGRAM_HASH: "2f3b8e7902c923525dac848f26ed39a43132d58b"
  FLECSISP_PORTAGE_INSTALL_PREFIX: "${CI_PROJECT_DIR}/portage/build/install"
  FLECSISP_PORTAGE_HASH: "e7ebc43dde36b49e3102e8b5bd0e565ed21d5309"
  FLECSISP_ENV_SOURCE_FILE: "${CI_PROJECT_DIR}/build/flecsi-sp-deps-${RUNTIME}-${FLECSISP_MPI_PACKAGE}-${CI_COMMIT_REF_SLUG}-${CI_CONCURRENT_ID}.sh"
  FLECSISP_SPACK_SCOPE: "lanl_ristra_flecsi-sp"
  FLECSISP_SPACK_SPEC: "flecsi-sp-deps%gcc@${FLECSISP_GCC_VERSION} backend=${RUNTIME} +portage"
before_script:
  - echo ${CI_JOB_NAME_NOSTAGE%.*}-${CI_COMMIT_REF_SLUG}
  - '[ "$(git rev-parse origin/$CI_COMMIT_REF_NAME)" != "$CI_COMMIT_SHA" ] && curl --header "PRIVATE-TOKEN: $MY_CI_API_TOKEN" -X POST https://gitlab.lanl.gov/api/v4/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/cancel'
  #- find . -name "`basename cinch`" | grep "cinch\$" | xargs rm -fr
  - export HOME=${CI_PROJECT_DIR}
  - export TMPDIR=${CI_PROJECT_DIR}
  - mkdir -p ${CI_PROJECT_DIR}/build
  - module load gcc/${FLECSISP_GCC_VERSION}
  - module load python/${FLECSISP_PYTHON_VERSION}
  - echo ${FLECSISP_ENV_SOURCE_FILE}
  - export FLECSISP_SPACK_FULL_SPEC="${FLECSISP_SPACK_SPEC} ^${FLECSISP_MPI_PACKAGE}@$([ ${FLECSISP_MPI_PACKAGE} == 'openmpi' ] && echo ${FLECSISP_OPENMPI_VERSION} || echo ${FLECSISP_MPICH_VERSION})%gcc@${FLECSISP_GCC_VERSION}"
  - rm ${FLECSISP_ENV_SOURCE_FILE} || /bin/true
  - cd ${CI_PROJECT_DIR}
  - git clone git@gitlab.lanl.gov:laristra/ristra_spackages.git
  - . ${FLECSISP_SPACK_ROOT}/share/spack/setup-env.sh
  - |
    ( flock -e 200
    spack repo rm ${FLECSISP_SPACK_SCOPE} || /bin/true ;
    spack repo rm lanl_ristra || /bin/true ;
    spack repo add ${CI_PROJECT_DIR}/ristra_spackages/spack-repo;
    spack repo add ${CI_PROJECT_DIR}/spack-repo;
    spack repo list;
    echo ${FLECSISP_SPACK_FULL_SPEC};
    spack module tcl loads --dependencies ${FLECSISP_SPACK_FULL_SPEC} | tee ${FLECSISP_ENV_SOURCE_FILE} || /bin/true;
    spack repo rm ${FLECSISP_SPACK_SCOPE};
    spack repo rm lanl_ristra;
    ) 200>${FLECSISP_DEPS_LOCK}
  - source ${FLECSISP_ENV_SOURCE_FILE} || /bin/true
  - |
    if [[ ${CI_JOB_NAME} =~ "clang" ]];
    then
      module load clang/${FLECSISP_CLANG_VERSION};
    elif [[ ${CI_JOB_NAME} =~ "intel" ]];
    then
      module load intel/${FLECSISP_INTEL_VERSION};
    fi
  - module list
  - echo $CC;
  - echo $CXX;

##########################
# Build Matrix Variables #
##########################

.runtime_mpi: &runtime_mpi
  RUNTIME: "mpi"

.runtime_legion: &runtime_legion
  RUNTIME: "legion"

.runtime_hpx: &runtime_hpx
  RUNTIME: "hpx"

.compiler_gcc: &compiler_gcc
  CC: "gcc"
  CXX: "g++"

.compiler_clang: &compiler_clang
  CC: "clang"
  CXX: "clang++"

.compiler_intel: &compiler_intel
  CC: "icc"
  CXX: "icpc"

.buildtype_debug: &buildtype_debug
  BUILD_TYPE: "Debug"

.buildtype_release: &buildtype_release
  BUILD_TYPE: "Release"

.openmpi: &openmpi
  FLECSISP_MPI_PACKAGE: "openmpi"

.mpich: &mpich
  FLECSISP_MPI_PACKAGE: "mpich"

.ignore_noci: &ignore_noci
  IGNORE_NOCI: "TRUE"

#######################
# Templates & Anchors #
#######################

.general_template: &general_def
  retry: 1
  only:
    - merge_requests
    - "1.4"
    - "1"

.cache_template: &cache_def
  cache:
    #key: ${CI_JOB_NAME_NOSTAGE%.*}-${CI_COMMIT_REF_SLUG}
    #key: ${CI_COMMIT_REF_SLUG}
    key: ${DISTRO}-${RUNTIME}-${CC}
    paths:
      - ccache/

.artifacts_template: &artifacts_def
  artifacts:
    name: "${CI_COMMIT_REF_SLUG}-${CI_JOB_NAME}"
    paths:
      - ${CI_PROJECT_DIR}/build #/builds/next-generation-codes/laristra/flecsi-sp/build
    when: always
    expire_in: 2 weeks
  dependencies: []

.shell_template: &shell_def
  tags: &shell_tags
    - shell

.batch_template: &batch_def
  tags: &batch_tags
    - darwin-slurm

.job_template: &job_def
  <<: *general_def
  <<: *cache_def

.update_spackage: &update_spackage
  - echo 'Updating spackages...'
  - cd ${CI_PROJECT_DIR}
  - for f in $(find ./spack-repo/packages/ -type f); do diff -urN ${CI_PROJECT_DIR}/ristra_spackages/$f $f | tee $f.patch || /bin/true; done
  - for f in $(find ./spack-repo/packages/ -type f -name "*.patch"); do patch -i $f ${CI_PROJECT_DIR}/ristra_spackages/${f%.*}; done
  - for f in $(find ./spack-repo/packages/ -type f -name "*.patch"); do rm $f; done
  - cd ${CI_PROJECT_DIR}/ristra_spackages
  - git add spack-repo/packages/*
  - git commit -m "Gitlab CI Automatic Spackage Update - FleCSI-SP" || /bin/true
  - git push -u origin master

#############
# Env Stage #
#############

.env_template: &env_def
  <<: *job_def
  stage: Env
  script: &env_script
    - |
      if [[ ${I_WANT_TO_CLEAN_UP} ]];
      then
        rm -rf ${FLECSISP_SPACK_ROOT}/*;
      fi
    - |
      ( flock -e 200
      if [[ ! -d ${FLECSISP_SPACK_ROOT} ]];
      then
        git init --shared=group ${FLECSISP_SPACK_ROOT};
        git -c ${FLECSISP_SPACK_ROOT} pull https://github.com/spack/spack develop;
      fi;
      source ${FLECSISP_SPACK_ROOT}/share/spack/setup-env.sh;
      spack repo rm ${FLECSISP_SPACK_SCOPE} || /bin/true ;
      spack repo rm lanl_ristra || /bin/true ;
      spack repo add ${CI_PROJECT_DIR}/ristra_spackages/spack-repo;
      spack repo add ${CI_PROJECT_DIR}/spack-repo;
      spack repo list;
      spack clean --all;
      spack install --show-log-on-error ${FLECSISP_SPACK_SPEC} ^openmpi@${FLECSISP_OPENMPI_VERSION}%gcc@${FLECSISP_GCC_VERSION} | tee -a spack_tmp.out;
      spack install --show-log-on-error ${FLECSISP_SPACK_SPEC} ^mpich@${FLECSISP_MPICH_VERSION}%gcc@${FLECSISP_GCC_VERSION} | tee -a spack_tmp.out;
      spack repo rm ${FLECSISP_SPACK_SCOPE};
      spack repo rm lanl_ristra;
      ) 200>${FLECSISP_DEPS_LOCK}
    - $([ "$(grep -c "Errno " spack_tmp.out)" = "0" ] && exit 0 || exit 1)

###############
# Build Stage #
###############

.build: &build_def
  <<: *job_def
  #<<: *artifacts_def
  stage: Build_n_Test
  script: &build_script
    - echo 'Start building'
    - ccache -z
    - nproc
    - mkdir -p ${CI_PROJECT_DIR}/build
    - mkdir -p ${CI_PROJECT_DIR}/build/install
    - cd ${CI_PROJECT_DIR}
    - echo "BUILDING TANGRAM"
    - git clone --recurse-submodules ssh://git@xcp-stash.lanl.gov:7999/laristra/tangram.git
    - cd tangram
    - git checkout ${FLECSISP_TANGRAM_HASH}
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - |
      cmake \
        -D CMAKE_C_COMPILER=`which mpicc` \
        -D CMAKE_CXX_COMPILER=`which mpiCC` \
        -D CMAKE_BUILD_TYPE=Release \
        -D ENABLE_UNIT_TESTS=True \
        -D ENABLE_MPI=True \
        -D CMAKE_INSTALL_PREFIX=${FLECSISP_TANGRAM_INSTALL_PREFIX} \
        ..
    - make -j2
    - make install/local
    - export CMAKE_PREFIX_PATH=${FLECSISP_TANGRAM_INSTALL_PREFIX}:${CMAKE_PREFIX_PATH}
    - echo "DONE BUILDING TANGRAM"
    - echo "BUILDING PORTAGE"
    - cd ${CI_PROJECT_DIR}
    - git clone --recurse-submodules ssh://git@xcp-stash.lanl.gov:7999/laristra/portage.git
    - cd portage
    - git checkout ${FLECSISP_PORTAGE_HASH}
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - |
      cmake \
        -D CMAKE_BUILD_TYPE=Release \
        -D ENABLE_UNIT_TESTS=True \
        -D ENABLE_APP_TESTS=True \
        -D ENABLE_MPI=True \
        -D TANGRAM_DIR:FILEPATH=${FLECSISP_TANGRAM_INSTALL_PREFIX} \
        -D XMOF2D_DIR:FILEPATH=${XMOF2D_INSTALL_PREFIX}/share/cmake \
        -D CMAKE_INSTALL_PREFIX=${FLECSISP_PORTAGE_INSTALL_PREFIX} \
        ..
    - make -j4
    - make install
    - export CMAKE_PREFIX_PATH=${FLECSISP_PORTAGE_INSTALL_PREFIX}:${CMAKE_PREFIX_PATH}
    - echo "DONE BUILDING PORTAGE"
    - cd ${CI_PROJECT_DIR}
    - git clone --recursive https://github.com/laristra/libristra.git
    - mv libristra libristra-dev
    - cd libristra-dev
    - git submodule update --init --recursive
    - mkdir -p build
    - mkdir -p build/install
    - cd build
    - |
      cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/libristra-dev/build/install \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_LUA=ON \
            -DENABLE_UNIT_TESTS=ON \
            ..
    - make -k -j2 -l40 || make VERBOSE=1
    - make install
    - export CMAKE_PREFIX_PATH=${CI_PROJECT_DIR}/libristra-dev/build/install:$CMAKE_PREFIX_PATH
    - cd ${CI_PROJECT_DIR}
    - git clone --recursive https://github.com/laristra/flecsi.git
    - mv flecsi flecsi-dev
    - cd flecsi-dev
    - git checkout 1.4
    - git submodule update --init --recursive
    - mkdir -p build
    - mkdir -p build/install
    - cd build
    - |
      cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/flecsi-dev/build/install \
            -DCMAKE_BUILD_TYPE=Release \
            -DFLECSI_RUNTIME_MODEL=$RUNTIME \
            -DENABLE_FLECSIT=OFF \
            -DENABLE_FLECSI_TUTORIAL=OFF \
            -DENABLE_UNIT_TESTS=ON \
            -DENABLE_DOXYGEN=OFF \
            -DENABLE_DOCUMENTATION=OFF \
            -DENABLE_COVERAGE_BUILD=OFF \
            ..
    - make -k VERBOSE=1 -j2 -l40
    - make install
    - export CMAKE_PREFIX_PATH=${CI_PROJECT_DIR}/flecsi-dev/build/install:$CMAKE_PREFIX_PATH
    - cd ${CI_PROJECT_DIR}/build/
    - |
      cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/build/install \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DFLECSI_RUNTIME_MODEL=$RUNTIME \
            -DENABLE_UNIT_TESTS=ON \
            -DPORTAGE_LIBRARY=${FLECSISP_PORTAGE_INSTALL_PREFIX}/lib64/libportage.so \
            -DWONTON_LIBRARY=${FLECSISP_PORTAGE_INSTALL_PREFIX}/lib64/libwonton.so \
            -DPORTAGE_INCLUDE_DIR=${FLECSISP_PORTAGE_INSTALL_PREFIX}/include \
            -DTANGRAM_INCLUDE_DIR=${FLECSISP_TANGRAM_INSTALL_PREFIX}/include \
            ..
    - make -k -j2 -l40 || make VERBOSE=1
    - make install DESTDIR=${CI_PROJECT_DIR}/build/install
    - make install
    - ccache -s

##############
# Test Stage #
##############

.test: &test_def
  <<: *job_def
  stage: Test
  dependencies:
    #- "build:${CI_JOB_NAME#*:}"
    - .build_template
  script: &test_script
    - echo 'Start testing'
    - cd ${CI_PROJECT_DIR}/build/
    - make CTEST_OUTPUT_ON_FAILURE=1 test
    #- gcovr .

############
# Env Jobs #
############

env_mpi:
  extends: .env_template
  <<: *shell_def
  variables:
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc

env_legion:
  extends: .env_template
  <<: *shell_def
  variables:
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc

env_update:
  extends: env_mpi
  only:
    refs:
      - "1.4"
  script:
    - *update_spackage
  allow_failure: true

##############
# Build Jobs #
##############

build:centOS_mpi:
  extends: .build
  <<: *shell_def
  variables:
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
    <<: *openmpi
  script:
    - *build_script
    - *test_script

.build:centOS_mpi_release:
  extends: build:centOS_mpi
  variables:
    <<: *buildtype_release

.build:centOS_mpi_clang:
  extends: build:centOS_mpi
  variables:
    <<: *compiler_clang

.build:centOS_mpi_clang_release:
  extends: .build:centOS_mpi_clang
  variables:
    <<: *buildtype_release

.build:centOS_mpi_intel:
  extends: build:centOS_mpi
  variables:
    <<: *compiler_intel
  allow_failure: true

.build:centOS_mpi_intel_release:
  extends: .build:centOS_mpi_intel
  variables:
    <<: *buildtype_release

.build:centOS_mpich_mpi:
  extends: .build
  <<: *shell_def
  variables:
    <<: *runtime_mpi
    <<: *buildtype_debug
    <<: *compiler_gcc
    <<: *mpich
  script:
    - *build_script
    - *test_script

.build:centOS_mpich_mpi_release:
  extends: .build:centOS_mpich_mpi
  variables:
    <<: *buildtype_release

build:centOS_mpich_mpi_clang:
  extends: .build:centOS_mpich_mpi
  variables:
    <<: *compiler_clang

.build:centOS_mpich_mpi_clang_release:
  extends: build:centOS_mpich_mpi_clang
  variables:
    <<: *buildtype_release

.build:centOS_mpich_mpi_intel:
  extends: .build:centOS_mpich_mpi
  variables:
    <<: *compiler_intel
  allow_failure: true

.build:centOS_mpich_mpi_intel_release:
  extends: .build:centOS_mpich_mpi_intel
  variables:
    <<: *buildtype_release

build:centOS_legion:
  extends: .build
  <<: *shell_def
  variables:
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
    <<: *openmpi
  script:
    - *build_script
    - *test_script

.build:centOS_legion_release:
  extends: build:centOS_legion
  variables:
    <<: *buildtype_release

.build:centOS_legion_clang:
  extends: build:centOS_legion
  variables:
    <<: *compiler_clang

.build:centOS_legion_clang_release:
  extends: .build:centOS_legion_clang
  variables:
    <<: *buildtype_release

.build:centOS_legion_intel:
  extends: build:centOS_legion
  variables:
    <<: *compiler_intel
  allow_failure: true

.build:centOS_legion_intel_release:
  extends: .build:centOS_legion_intel
  variables:
    <<: *buildtype_release

.build:centOS_mpich_legion:
  extends: .build
  <<: *shell_def
  variables:
    <<: *runtime_legion
    <<: *buildtype_debug
    <<: *compiler_gcc
    <<: *mpich
  script:
    - *build_script
    - *test_script

.build:centOS_mpich_legion_release:
  extends: .build:centOS_mpich_legion
  variables:
    <<: *buildtype_release

build:centOS_mpich_legion_clang:
  extends: .build:centOS_mpich_legion
  variables:
    <<: *compiler_clang

.build:centOS_mpich_legion_clang_release:
  extends: build:centOS_mpich_legion_clang
  variables:
    <<: *buildtype_release

.build:centOS_mpich_legion_intel:
  extends: .build:centOS_mpich_legion
  variables:
    <<: *compiler_intel
  allow_failure: true

.build:centOS_mpich_legion_intel_release:
  extends: .build:centOS_mpich_legion_intel
  variables:
    <<: *buildtype_release

#######################################################################################
#######################################################################################
#######################################################################################

flecsale-mm:
  stage: Trigger
  only:
    - merge_requests
    - master
  variables:
    UPSTREAM_REPO: "specializations"
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
    UPSTREAM_URL: $CI_PROJECT_URL
  trigger:
    project: laristra/flecsale-mm
    branch: master
    strategy: depend